generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  name             String
  password         String?
  provider         String?
  refreshToken     String?
  memberships      TeamMembership[] // Relation to teams with specific roles
  taskAssignments  TaskAssignment[]
  notifications    Notification[]
  activityLogs     ActivityLog[]
  sprints          Sprint[]
  timeTracking     TimeTracking[]
  apiKeys          ApiKey[]
  webHooks         WebHook[]
  sentMessages     Message[]        @relation("SentMessages")
  receivedMessages Message[]        @relation("ReceivedMessages")
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now())
}

model Team {
  id              String           @id @default(cuid())
  name            String
  memberships     TeamMembership[] // Users associated with roles in the team
  projects        Project[]
  taskAssignments TaskAssignment[]
  sprints         Sprint[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
}

model TeamMembership {
  id        String    @id @default(cuid())
  userId    String
  teamId    String
  role      TeamRole  @default(Viewer)
  status    String    @default("pending") // pending, active, declined
  token     String?   @unique // For invitation links
  email     String? // Store email for invitations before user registration
  expiresAt DateTime? // When the invitation expires
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId]) // Prevents duplicate user-team entries
}

model Project {
  id        String     @id @default(cuid())
  name      String
  teamId    String
  team      Team       @relation(fields: [teamId], references: [id])
  tasks     Task[]
  workFlows WorkFlow[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Task {
  id              String           @id @default(cuid())
  name            String
  description     String?
  projectId       String
  project         Project          @relation(fields: [projectId], references: [id])
  taskAssignments TaskAssignment[]
  subTasks        SubTask[]
  timeTracking    TimeTracking[]
  files           File[]
  status          TaskStatus       @default(TODO)

  // Time tracking fields
  dueDate        DateTime? // When the task is due
  startedAt      DateTime? // When the task was moved to IN_PROGRESS
  completedAt    DateTime? // When the task was moved to DONE
  estimatedHours Float? // Estimated time to complete in hours
  actualHours    Float? // Actual time spent on task (calculated)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Dependencies
  dependencies   Task[] @relation("TaskDependencies")
  dependentTasks Task[] @relation("TaskDependencies")

  // Blockers
  blockedBy Task[] @relation("TaskBlockedBy")
  blocking  Task[] @relation("TaskBlockedBy")
}

// Enhance TimeTracking model to better support sessions
model TimeTracking {
  id          String    @id @default(cuid())
  taskId      String
  userId      String
  task        Task      @relation(fields: [taskId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  description String? // What was done during this time session
  startTime   DateTime
  endTime     DateTime? // Nullable to support ongoing tracking
  duration    Float? // Duration in hours (calculated)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
}

model TaskAssignment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  teamId    String?
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  team      Team?    @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model SubTask {
  id          String   @id @default(cuid())
  name        String
  description String?
  taskId      String
  task        Task     @relation(fields: [taskId], references: [id])
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  type      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Sprint {
  id        String   @id @default(cuid())
  name      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Message {
  id         String        @id @default(cuid())
  text       String // Changed from 'text' to match DTO's 'message' field
  senderId   String // New field for the sender
  receiverId String // New field for the receiver
  sender     User          @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User          @relation("ReceivedMessages", fields: [receiverId], references: [id])
  sentAt     DateTime      @default(now()) // For storing the full date and time
  status     MessageStatus @default(SENT) // Using enum for message status
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @default(now())
}

model ApiKey {
  id        String   @id @default(cuid())
  key       String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Nodes {
  id                String    @id @default(cuid())
  type              String
  positionX         Float
  positionY         Float
  data              Json
  width             Int
  height            Int
  selected          Boolean
  positionAbsoluteX Float
  positionAbsoluteY Float
  dragging          Boolean
  workFlow          WorkFlow? @relation(fields: [workFlowId], references: [id])
  workFlowId        String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Edges {
  id           String    @id @default(cuid())
  type         String
  style        Json
  source       String
  sourceHandle String?
  target       String
  targetHandle String?
  animated     Boolean   @default(false)
  workFlow     WorkFlow? @relation(fields: [workFlowId], references: [id])
  workFlowId   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model WorkFlow {
  id        String   @id @default(cuid())
  name      String
  nodes     Nodes[]
  edges     Edges[]
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebHook {
  id        String   @id @default(cuid())
  url       String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum TeamRole {
  Viewer
  Editor
  Admin
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}
